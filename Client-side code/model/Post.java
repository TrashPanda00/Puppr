package model;

import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.ArrayList;

/**
 * The Post class encapsulates all the needed information about a post, including the unique
 * <code>postId</code>, the <code>handle</code> of the user who made the post and the post text
 * and/or image content.
 *
 * @author Natali Munk-Jakobsen
 * @version 1.0
 */
public class Post implements Serializable {
  private int postId;
  private byte[] imageURL;
  private String handle;
  private int likes;
  private String text;
  private LocalDateTime timePosted;
  private ArrayList<Comment> comments;

  /**
   * A constructor for setting all the attributes of a Post object. This constructor is mostly used
   * when getting Post information from the server/database.
   * @param postId
   *        the unique identifier of every post in the form of an integer code
   * @param imageURL
   *        the byte information of the picture added in the post. It can be <code>null</code>
   * @param handle
   *        the handle of the author of the post
   * @param likes
   *        the number of likes the post has
   * @param timePosted
   *        the time and date the post was made
   * @param text
   *        the text of the post. Can be <code>null</code>
   * @param comments
   *        the list of comments the post has.
   */
  public Post(int postId, byte[] imageURL, String handle, int likes,
              LocalDateTime timePosted, String text, ArrayList<Comment> comments) {
    this.postId = postId;
    this.imageURL = imageURL;
    this.handle = handle;
    this.likes = likes;
    this.timePosted = timePosted;
    this.text = text;
    this.comments = comments;
  }

  /**
   * A constructor used for setting all the attributes of the Post object except the
   * <code>postId</code>. This constructor is mostly used for getting Post information
   * from the server/database.
   * @param imageURL
   *        the byte information of the picture added in the post. It can be <code>null</code>
   * @param handle
   *        the handle of the author of the post
   * @param likes
   *        the number of likes the post has
   * @param timePosted
   *        the time and date the post was made
   * @param text
   *        the text of the post. Can be <code>null</code>
   * @param comments
   *        the list of comments the post has.
   */
  public Post(byte[] imageURL, String handle, int likes,
              LocalDateTime timePosted, String text, ArrayList<Comment> comments) {
    this.imageURL = imageURL;
    this.handle = handle;
    this.likes = likes;
    this.timePosted = timePosted;
    this.text = text;
    this.comments = comments;
  }

  /////for adding new post

  /**
   * A constructor used for creating a new Post object. The constructor sets the number
   * of likes to 0 and the time posted to the current time. It also sets the <code>postId</code>
   * to a specified value.
   * @param postId
   *        the unique identifier of every post in the form of an integer code
   * @param imageURL
   *        the byte information of the picture added in the post. It can be <code>null</code>
   * @param handle
   *        the handle of the author of the post   * @param text
   * @param text
   *        the text of the post. Can be <code>null</code>
   * @param comments
   *        the list of comments the post has.
   */
  public Post(int postId, byte[] imageURL, String handle,
              String text, ArrayList<Comment> comments) {
    this.postId = postId;
    this.imageURL = imageURL;
    this.handle = handle;
    this.likes = 0;
    this.timePosted = LocalDateTime.now();
    this.text = text;
    this.comments = comments;
  }

  /**
   * A constructor used for creating a new Post object. The constructor sets the number
   * of likes to 0 and the time posted to the current time. The <code>postId</code> is
   * not set here but left to be automatically generated by the database.
   * @param imageURL
   *        the byte information of the picture added in the post. It can be <code>null</code>
   * @param handle
   *        the handle of the author of the post   * @param text
   * @param text
   *        the text of the post. Can be <code>null</code>
   * @param comments
   *        the list of comments the post has.
   */
  public Post(byte[] imageURL, String handle, int likes,
              String text, ArrayList<Comment> comments) {
    this.imageURL = imageURL;
    this.handle = handle;
    this.likes = likes;
    this.timePosted = LocalDateTime.now();
    this.text = text;
    this.comments = comments;
  }

  /**
   * Getter for the <code>imageURL</code> of the post
   * @return a reference to the byte information of the image.
   */
  public byte[] getImageURL() {
    return imageURL;
  }

  /**
   * Getter for the <code>handle</code> of the post
   * @return a reference to the handle of the author of the current post.
   */
  public String getHandle() {
    return handle;
  }

  /**
   * Getter for the number of likes of the post
   * @return the current number of likes of the post.
   */
  public int getLikes() {
    return likes;
  }

  /**
   * Getter for the <code>text</code> attribute of the Post object
   * @return a reference to the text of the current post.
   */
  public String getText() {
    return text;
  }

  /**
   * Getter for the <code>postId</code> of the Post object
   * @return the id for the current post
   */
  public int getPostId() {
    return postId;
  }

  /**
   * Getter for the <code>timePosted</code> attribute of the Post object
   * @return a reference to the time that the current post was posted at.
   */
  public LocalDateTime getTimePosted() {
    return timePosted;
  }

  /**
   * Getter for the list of comments of the post
   * @return and ArrayList of data type Comment representing the cumulus
   * of all the comments posted on the current post.
   */
  public ArrayList<Comment> getComments() {
    return comments;
  }

  /**
   * A method returning the String interpretation of a Post object. The attributes are separated by commas
   * and encapsulated in between a set of curly braces.
   * Example: "{postId=1, imageURL='[B@24792502', handle='andrew01', likes=23, text='Hello guys!
   *          This is my new dog', timePosted=2020-05-08T09:20:01, comments=['aww']}"
   * @return a String representation of the Post object.
   */
  @Override
  public String toString() {
    return "{" + "postId=" + postId + ", imageURL='" + imageURL.toString() + '\''
            + ", handle='" + handle + '\'' + ", likes="
            + likes + ", text='" + text + '\'' + ", timePosted=" + timePosted
            + ", comments=" + comments + '}';
  }
}
